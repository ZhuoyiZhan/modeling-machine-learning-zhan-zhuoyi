knitr::opts_chunk$set(echo = TRUE)
library('class')
library('dplyr')
## load binary classification example data from author website
## 'ElemStatLearn' package no longer available
load(url('https://web.stanford.edu/~hastie/ElemStatLearn/datasets/ESL.mixture.rda'))
dat <- ESL.mixture
plot_mix_data <- expression({
plot(dat$x[,1], dat$x[,2],
col=ifelse(dat$y==0, 'blue', 'orange'),
pch=20,
xlab=expression(x[1]),
ylab=expression(x[2]))
## draw Bayes (True) classification boundary
prob <- matrix(dat$prob, length(dat$px1), length(dat$px2))
cont <- contourLines(dat$px1, dat$px2, prob, levels=0.5)
rslt <- sapply(cont, lines, col='purple')
})
eval(plot_mix_data)
## fit linear classifier
fit_lc <- function(y, x) {
x <- cbind(1, x)
beta <- drop(solve(t(x)%*%x)%*%t(x)%*%y)
}
## make predictions from linear classifier
predict_lc <- function(x, beta) {
cbind(1, x) %*% beta
}
## fit model to mixture data and make predictions
lc_beta <- fit_lc(dat$y, dat$x)
lc_pred <- predict_lc(dat$xnew, lc_beta)
## reshape predictions as a matrix
lc_pred <- matrix(lc_pred, length(dat$px1), length(dat$px2))
contour(lc_pred,
xlab=expression(x[1]),
ylab=expression(x[2]))
## find the contours in 2D space such that lc_pred == 0.5
lc_cont <- contourLines(dat$px1, dat$px2, lc_pred, levels=0.5)
## plot data and decision surface
eval(plot_mix_data)
sapply(lc_cont, lines)
## fit knn classifier
## use 5-NN to estimate probability of class assignment
knn_fit <- knn(train=dat$x, test=dat$xnew, cl=dat$y, k=5, prob=TRUE)
knn_pred <- attr(knn_fit, 'prob')
knn_pred <- ifelse(knn_fit == 1, knn_pred, 1-knn_pred)
## reshape predictions as a matrix
knn_pred <- matrix(knn_pred, length(dat$px1), length(dat$px2))
contour(knn_pred,
xlab=expression(x[1]),
ylab=expression(x[2]),
levels=c(0.2, 0.5, 0.8))
## find the contours in 2D space such that knn_pred == 0.5
knn_cont <- contourLines(dat$px1, dat$px2, knn_pred, levels=0.5)
## plot data and decision surface
eval(plot_mix_data)
sapply(knn_cont, lines)
## do bootstrap to get a sense of variance in decision surface
resample <- function(dat) {
idx <- sample(1:length(dat$y), replace = T)
dat$y <- dat$y[idx]
dat$x <- dat$x[idx,]
return(dat)
}
## plot linear classifier for three bootstraps
par(mfrow=c(1,3))
for(b in 1:3) {
datb <- resample(dat)
## fit model to mixture data and make predictions
lc_beta <- fit_lc(datb$y, datb$x)
lc_pred <- predict_lc(datb$xnew, lc_beta)
## reshape predictions as a matrix
lc_pred <- matrix(lc_pred, length(datb$px1), length(datb$px2))
## find the contours in 2D space such that lc_pred == 0.5
lc_cont <- contourLines(datb$px1, datb$px2, lc_pred, levels=0.5)
## plot data and decision surface
eval(plot_mix_data)
sapply(lc_cont, lines)
}
## plot 5-NN classifier for three bootstraps
par(mfrow=c(1,3))
for(b in 1:3) {
datb <- resample(dat)
knn_fit <- knn(train=datb$x, test=datb$xnew, cl=datb$y, k=5, prob=TRUE)
knn_pred <- attr(knn_fit, 'prob')
knn_pred <- ifelse(knn_fit == 1, knn_pred, 1-knn_pred)
## reshape predictions as a matrix
knn_pred <- matrix(knn_pred, length(datb$px1), length(datb$px2))
## find the contours in 2D space such that knn_pred == 0.5
knn_cont <- contourLines(datb$px1, datb$px2, knn_pred, levels=0.5)
## plot data and decision surface
eval(plot_mix_data)
sapply(knn_cont, lines)
}
## plot 20-NN classifier for three bootstraps
par(mfrow=c(1,3))
for(b in 1:3) {
datb <- resample(dat)
knn_fit <- knn(train=datb$x, test=datb$xnew, cl=datb$y, k=20, prob=TRUE)
knn_pred <- attr(knn_fit, 'prob')
knn_pred <- ifelse(knn_fit == 1, knn_pred, 1-knn_pred)
## reshape predictions as a matrix
knn_pred <- matrix(knn_pred, length(datb$px1), length(datb$px2))
## find the contours in 2D space such that knn_pred == 0.5
knn_cont <- contourLines(datb$px1, datb$px2, knn_pred, levels=0.5)
## plot data and decision surface
eval(plot_mix_data)
sapply(knn_cont, lines)
}
view(dat)
View(dat)
typeof(dat)
View(dat)
nfunc <- lm(y~x, data=dat[,c(1,2)])
nfunc <- lm(y~x, data=dat)
nfunc <- lm(y~x, data=dat[,c(1:2)])
View(dat)
nfunc <- lm(y~x, data=dat[1:2])
nfunc
nfunc <- lm(y~x, data=dat[1:2])
summary(nfunc)
nfunc <- lm(y~x, data=dat[1:2])
summary(nfunc)
plot(nfunc)
nfunc <- lm(y~x, data=dat[1:2])
summary(nfunc)
plot(dat$x,dat$y,col='red', main='Summary of Regression Model', xlab='x', ylab='y')
nfunc <- lm(y~x, data=dat[1:2])
summary(nfunc)
plot(dat[1],dat[2],col='red', main='Summary of Regression Model', xlab='x', ylab='y')
df <- as.data.frame(dat)
df <- as.data.frame(dat)
df <- as.data.frame(dat)
knitr::opts_chunk$set(echo = TRUE)
library('class')
library('dplyr')
## load binary classification example data from author website
## 'ElemStatLearn' package no longer available
load(url('https://web.stanford.edu/~hastie/ElemStatLearn/datasets/ESL.mixture.rda'))
dat <- ESL.mixture
plot_mix_data <- expression({
plot(dat$x[,1], dat$x[,2],
col=ifelse(dat$y==0, 'blue', 'orange'),
pch=20,
xlab=expression(x[1]),
ylab=expression(x[2]))
## draw Bayes (True) classification boundary
prob <- matrix(dat$prob, length(dat$px1), length(dat$px2))
cont <- contourLines(dat$px1, dat$px2, prob, levels=0.5)
rslt <- sapply(cont, lines, col='purple')
})
eval(plot_mix_data)
## fit linear classifier
fit_lc <- function(y, x) {
x <- cbind(1, x)
beta <- drop(solve(t(x)%*%x)%*%t(x)%*%y)
}
## make predictions from linear classifier
predict_lc <- function(x, beta) {
cbind(1, x) %*% beta
}
## fit model to mixture data and make predictions
lc_beta <- fit_lc(dat$y, dat$x)
lc_pred <- predict_lc(dat$xnew, lc_beta)
## reshape predictions as a matrix
lc_pred <- matrix(lc_pred, length(dat$px1), length(dat$px2))
contour(lc_pred,
xlab=expression(x[1]),
ylab=expression(x[2]))
## find the contours in 2D space such that lc_pred == 0.5
lc_cont <- contourLines(dat$px1, dat$px2, lc_pred, levels=0.5)
## plot data and decision surface
eval(plot_mix_data)
sapply(lc_cont, lines)
nf <- lm(y~x, data=dat[1:2])
summary(nf)
eval(plot_mix_data)
#add fitted regression line
abline(model)
nf <- lm(y~x, data=dat[1:2])
summary(nf)
eval(plot_mix_data)
#add fitted regression line
abline(nf)
nf <- lm(y~., data=dat[1:2])
nf <- lm(dat.y~., data=dat[1:2])
data <- data.frame(dat$y,dat$x)
beta_lm <- lm(dat.y~., data)
pred <- predict.lm(beta_lm, dat$xnew)
nf <- lm(y~x, data=dat[1:2])
summary(nf)
eval(plot_mix_data)
#add fitted regression line
abline(nf)
data <- data.frame(dat$y,dat$x)
beta_lm <- lm(dat.y~., data)
summary(beta_lm)
#newx <-data.frame(dat$xnew)
newx <-data.frame(dat$xnew)
newx <- rename(newx, X1= x1, X2=x2)
pred <- predict.lm(beta_lm, newx)
newx <-data.frame(dat$xnew)
newx <- rename(newx, X1= x1, X2=x2)
pred <- predict.lm(beta_lm, newx)
pred
data <- data.frame(dat$y,dat$x)
beta_lm <- lm(dat.y~., data)
summary(beta_lm)
#newx <-data.frame(dat$xnew)
newx <-data.frame(dat$xnew)
newx <- rename(newx, X1= x1, X2=x2)
pred <- predict.lm(beta_lm, newx)
sq_data <- data.frame(dat$y,dat$x,(dat$x)**2)
sq_beta_lm <- lm(dat.y~., sq_data)
sq_x <-data.frame(dat$xnew,(dat$xnew)**2)
sq_x <- rename(sq_x, X1= x1, X2=x2,X1.1=x1.1, X2.1=x2.1)
sq_pred <- predict.lm(sq_beta_lm, sq_data)
sq_data <- data.frame(dat$y,dat$x,(dat$x)**2)
sq_beta_lm <- lm(dat.y~., sq_data)
sq_x <-data.frame(dat$xnew,(dat$xnew)**2)
sq_x <- rename(sq_x, X1= x1, X2=x2,X1.1=x1.1, X2.1=x2.1)
sq_pred <- predict.lm(sq_beta_lm, sq_x)
data <- data.frame(dat$y,dat$x)
beta_lm <- lm(dat.y~., data)
summary(beta_lm)
#newx <-data.frame(dat$xnew)
newx <-data.frame(dat$xnew)
newx <- rename(newx, X1= x1, X2=x2)
pred <- predict.lm(beta_lm, newx)
sq_data <- data.frame(dat$y,dat$x,(dat$x)**2)
sq_beta_lm <- lm(dat.y~., sq_data)
sq_x <-data.frame(dat$xnew,(dat$xnew)**2)
sq_x <- rename(sq_x, X1= x1, X2=x2,X1.1=x1.1, X2.1=x2.1)
sq_pred <- predict.lm(sq_beta_lm, sq_x)
sq_data <- data.frame(dat$y,dat$x,(dat$x)**2)
sq_beta_lm <- lm(dat.y~., sq_data)
sq_x <-data.frame(dat$xnew,(dat$xnew)**2)
sq_x <- rename(sq_x, X1= x1, X2=x2,X1.1=x1.1, X2.1=x2.1)
sq_pred <- predict.lm(sq_beta_lm, sq_x)
summary(sq_beta_lm)
sq_data <- data.frame(dat$y,dat$x,(dat$x)**2)
sq_beta_lm <- lm(dat.y~., sq_data)
sq_x <-data.frame(dat$xnew,(dat$xnew)**2)
sq_x <- rename(sq_x, X1= x1, X2=x2,X1.1=x1.1, X2.1=x2.1)
sq_pred <- predict.lm(sq_beta_lm, sq_x)
summary(sq_beta_lm)
eval(plot_mix_data)
#add fitted regression line
abline(sq_beta_lm)
sq_data <- data.frame(dat$y,dat$x,(dat$x)**2)
sq_beta_lm <- lm(dat.y~., sq_data)
sq_x <-data.frame(dat$xnew,(dat$xnew)**2)
sq_x <- rename(sq_x, X1= x1, X2=x2,X1.1=x1.1, X2.1=x2.1)
sq_pred <- predict.lm(sq_beta_lm, sq_x)
summary(sq_beta_lm)
newx <-data.frame(dat$xnew)
newx <- rename(newx, X1= x1, X2=x2)
pred <- predict.lm(beta_lm, newx)
data <- data.frame(dat$y,dat$x)
beta_lm <- lm(dat.y~., data)
summary(beta_lm)
#newx <-data.frame(dat$xnew)
nf <- lm(y~x, data=dat[1:2])
summary(nf)
eval(plot_mix_data)
#add fitted regression line
abline(nf)
data <- data.frame(dat$y,dat$x)
beta_lm <- lm(dat.y~., data)
summary(beta_lm)
#newx <-data.frame(dat$xnew)
newx <-data.frame(dat$xnew)
newx <- rename(newx, X1= x1, X2=x2)
pred <- predict.lm(beta_lm, newx)
sq_data <- data.frame(dat$y,dat$x,(dat$x)**2)
sq_beta_lm <- lm(dat.y~., sq_data)
sq_x <-data.frame(dat$xnew,(dat$xnew)**2)
sq_x <- rename(sq_x, X1= x1, X2=x2,X1.1=x1.1, X2.1=x2.1)
sq_pred <- predict.lm(sq_beta_lm, sq_x)
summary(sq_beta_lm)
data <- data.frame(dat$y,dat$x)
beta_lm <- lm(dat.y~., data)
summary(beta_lm)
#newx <-data.frame(dat$xnew)
